{"version":3,"sources":["images/home.png","images/aidhero_logo.svg","containers/Home/Home.js","router.js","components/common/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","data-src","ImgHome","data-srcset","uk-img","Component","Router","Switch","Route","exact","component","NavBar","uk-navbar","Logo","width","height","alt","href","App","common_Navbar","router","Boolean","window","location","hostname","match","UIkit","use","Icons","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kUCqBzBC,mLAfP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2FACVC,WAAUC,IACVC,cAAaD,IACZE,SAAO,QAGTP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,8CATGK,aCMJC,EANA,kBACXT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,OAAK,EAACC,UAAWd,+BC4BjBe,mLA5BP,OACId,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CAA4CY,YAAU,eACjEf,EAAAC,EAAAC,cAAA,OAAKE,WAAUY,IAAMC,MAAM,MAAMC,OAAO,KAAKC,IAAI,UAAUZ,SAAO,SAClEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,KAAR,aAC1BpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,KAAR,WAC1BpB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,KAAR,SACJpB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,KAAR,WAGZpB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,KAAR,UAEJpB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGkB,KAAK,KAAR,uBApBfZ,aCaNa,0LAVP,OACIrB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACqB,EAAD,cALEf,cCOEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+GCRNC,IAAMC,IAAIC,KAQVC,IAASC,OAAOjC,EAAAC,EAAAC,cANG,kBACfF,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACIlC,EAAAC,EAAAC,cAACiC,EAAD,QAIQ,MAAgBC,SAASC,eAAe,SD+GlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a34956fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/home.b708e6d1.png\";","module.exports = __webpack_public_path__ + \"static/media/aidhero_logo.b0a80ffd.svg\";","import React, {Component} from 'react';\nimport './Home.css';\nimport ImgHome from '../../images/home.png'\n\nclass Home extends Component {\n    render() {\n        return (\n            <div className='header uk-height-medium uk-flex uk-flex-left uk-flex-middle uk-background-cover uk-light'\n                 data-src={ImgHome}\n                 data-srcset={ImgHome}\n                  uk-img=\"true\">\n\n\n                <h1 className=\"header_text\" > GIVE BACK A LITTLE OF YOUR TIME_ </h1>\n\n            </div>\n\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport Home from './containers/Home/Home';\n\nconst Router = () => (\n    <Switch>\n        <Route exact component={Home} />\n    </Switch>\n);\n\nexport default Router;","import React, {Component} from 'react';\nimport './Navbar.css';\nimport Logo from '../../images/aidhero_logo.svg'\n\nclass NavBar extends Component{\n    render(){\n        return(\n            <div className='navbar'>\n                <div >\n                    <nav className=\"uk-navbar-container uk-navbar-transparent\" uk-navbar=\"mode: click\">\n                        <img data-src={Logo} width=\"200\" height=\"30\" alt=\"AIDHERO\" uk-img=\"true\"/>\n                        <div className=\"uk-navbar-right\">\n                            <ul className=\"uk-navbar-nav\">\n                                <li className=\"uk-active\"><a href=\"#\">Projects</a></li>\n                                <div className=\"uk-navbar-dropdown\">\n                                    <ul className=\"uk-nav uk-navbar-dropdown-nav\">\n                                        <li className=\"uk-active\"><a href=\"#\">Active</a></li>\n                                        <li><a href=\"#\">Item</a></li>\n                                        <li><a href=\"#\">Item</a></li>\n                                    </ul>\n                                </div>\n                                <li>\n                                    <a href=\"#\">Login</a>\n                                </li>\n                                <li><a href=\"#\">Signup</a></li>\n                            </ul>\n                        </div>\n                    </nav>\n                </div>\n    </div>\n    );\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport Router from './router';\nimport NavBar from './components/common/Navbar';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <NavBar/>\n                <Router/>\n\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'uikit/dist/css/uikit.min.css' ;\nimport UIkit from 'uikit';\nimport Icons from 'uikit/dist/js/uikit-icons';\nimport {BrowserRouter} from 'react-router-dom';\n// loads the Icon plugin\nUIkit.use(Icons);\n\nconst WithRouter = () => (\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n);\n\nReactDOM.render(<WithRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}